// TODO: add upstream errors

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: esom/basket/v1beta1/service.proto

package basketpbgrpc

import (
	context "context"
	v1b1 "github.com/eShopOnMicroservices/backend-api/gen/go/proto/esom/basket/v1b1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BasketService_GetBasket_FullMethodName   = "/esom.basket.v1beta1.BasketService/GetBasket"
	BasketService_EmptyBasket_FullMethodName = "/esom.basket.v1beta1.BasketService/EmptyBasket"
	BasketService_AddItem_FullMethodName     = "/esom.basket.v1beta1.BasketService/AddItem"
	BasketService_UpdateItem_FullMethodName  = "/esom.basket.v1beta1.BasketService/UpdateItem"
	BasketService_RemoveItem_FullMethodName  = "/esom.basket.v1beta1.BasketService/RemoveItem"
)

// BasketServiceClient is the client API for BasketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasketServiceClient interface {
	GetBasket(ctx context.Context, in *v1b1.GetBasketRequest, opts ...grpc.CallOption) (*v1b1.GetBasketResponse, error)
	EmptyBasket(ctx context.Context, in *v1b1.EmptyBasketRequest, opts ...grpc.CallOption) (*v1b1.EmptyBasketResponse, error)
	AddItem(ctx context.Context, in *v1b1.AddItemRequest, opts ...grpc.CallOption) (*v1b1.AddItemResponse, error)
	UpdateItem(ctx context.Context, in *v1b1.UpdateItemRequest, opts ...grpc.CallOption) (*v1b1.UpdateItemResponse, error)
	RemoveItem(ctx context.Context, in *v1b1.RemoveItemRequest, opts ...grpc.CallOption) (*v1b1.RemoveItemResponse, error)
}

type basketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketServiceClient(cc grpc.ClientConnInterface) BasketServiceClient {
	return &basketServiceClient{cc}
}

func (c *basketServiceClient) GetBasket(ctx context.Context, in *v1b1.GetBasketRequest, opts ...grpc.CallOption) (*v1b1.GetBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1b1.GetBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_GetBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) EmptyBasket(ctx context.Context, in *v1b1.EmptyBasketRequest, opts ...grpc.CallOption) (*v1b1.EmptyBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1b1.EmptyBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_EmptyBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) AddItem(ctx context.Context, in *v1b1.AddItemRequest, opts ...grpc.CallOption) (*v1b1.AddItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1b1.AddItemResponse)
	err := c.cc.Invoke(ctx, BasketService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) UpdateItem(ctx context.Context, in *v1b1.UpdateItemRequest, opts ...grpc.CallOption) (*v1b1.UpdateItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1b1.UpdateItemResponse)
	err := c.cc.Invoke(ctx, BasketService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) RemoveItem(ctx context.Context, in *v1b1.RemoveItemRequest, opts ...grpc.CallOption) (*v1b1.RemoveItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1b1.RemoveItemResponse)
	err := c.cc.Invoke(ctx, BasketService_RemoveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServiceServer is the server API for BasketService service.
// All implementations must embed UnimplementedBasketServiceServer
// for forward compatibility
type BasketServiceServer interface {
	GetBasket(context.Context, *v1b1.GetBasketRequest) (*v1b1.GetBasketResponse, error)
	EmptyBasket(context.Context, *v1b1.EmptyBasketRequest) (*v1b1.EmptyBasketResponse, error)
	AddItem(context.Context, *v1b1.AddItemRequest) (*v1b1.AddItemResponse, error)
	UpdateItem(context.Context, *v1b1.UpdateItemRequest) (*v1b1.UpdateItemResponse, error)
	RemoveItem(context.Context, *v1b1.RemoveItemRequest) (*v1b1.RemoveItemResponse, error)
	mustEmbedUnimplementedBasketServiceServer()
}

// UnimplementedBasketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBasketServiceServer struct {
}

func (UnimplementedBasketServiceServer) GetBasket(context.Context, *v1b1.GetBasketRequest) (*v1b1.GetBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (UnimplementedBasketServiceServer) EmptyBasket(context.Context, *v1b1.EmptyBasketRequest) (*v1b1.EmptyBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyBasket not implemented")
}
func (UnimplementedBasketServiceServer) AddItem(context.Context, *v1b1.AddItemRequest) (*v1b1.AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedBasketServiceServer) UpdateItem(context.Context, *v1b1.UpdateItemRequest) (*v1b1.UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedBasketServiceServer) RemoveItem(context.Context, *v1b1.RemoveItemRequest) (*v1b1.RemoveItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedBasketServiceServer) mustEmbedUnimplementedBasketServiceServer() {}

// UnsafeBasketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketServiceServer will
// result in compilation errors.
type UnsafeBasketServiceServer interface {
	mustEmbedUnimplementedBasketServiceServer()
}

func RegisterBasketServiceServer(s grpc.ServiceRegistrar, srv BasketServiceServer) {
	s.RegisterService(&BasketService_ServiceDesc, srv)
}

func _BasketService_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1b1.GetBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_GetBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).GetBasket(ctx, req.(*v1b1.GetBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_EmptyBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1b1.EmptyBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).EmptyBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_EmptyBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).EmptyBasket(ctx, req.(*v1b1.EmptyBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1b1.AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).AddItem(ctx, req.(*v1b1.AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1b1.UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).UpdateItem(ctx, req.(*v1b1.UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1b1.RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).RemoveItem(ctx, req.(*v1b1.RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasketService_ServiceDesc is the grpc.ServiceDesc for BasketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "esom.basket.v1beta1.BasketService",
	HandlerType: (*BasketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasket",
			Handler:    _BasketService_GetBasket_Handler,
		},
		{
			MethodName: "EmptyBasket",
			Handler:    _BasketService_EmptyBasket_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _BasketService_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _BasketService_UpdateItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _BasketService_RemoveItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "esom/basket/v1beta1/service.proto",
}
